# WebRTC Camera Configuration File
# Adjust these settings based on your Pi Zero's performance and network conditions

[camera]
# Camera device index (usually 0 for the first camera)
device_index = 0

# Video resolution - lower values reduce CPU load and latency
# Recommended for Pi Zero: 320x240, 640x480, or 800x600
width = 640
height = 480

# Frame rate - higher values increase CPU load
# Recommended for Pi Zero: 15-30 FPS
fps = 20

# Camera buffer size (1 = minimal latency, higher = more stable)
buffer_size = 1

[encoding]
# Target bitrate in bits per second
# Lower values reduce bandwidth and CPU load
# Pi Zero recommended: 200000-800000 (200kbps-800kbps)
bitrate = 500000

# Video codec quality (affects CPU usage)
# H264 profile: baseline, main, high
# baseline = lowest CPU usage, high = best quality
h264_profile = baseline

# Keyframe interval (seconds)
# Lower values improve seeking but increase bandwidth
keyframe_interval = 2

[network]
# Server host (0.0.0.0 allows connections from any IP)
host = 0.0.0.0

# Server port
port = 8080

# ICE servers for NAT traversal
ice_servers = [
    {"urls": "stun:stun.l.google.com:19302"},
    {"urls": "stun:stun1.l.google.com:19302"}
]

# Maximum number of concurrent connections
max_connections = 3

[performance]
# Enable GPU acceleration if available
use_gpu_acceleration = true

# Thread count for video processing (0 = auto)
video_threads = 2

# Enable low-latency optimizations
low_latency_mode = true

# Frame dropping strategy when overloaded
# Options: none, aggressive, smart
frame_drop_strategy = smart

[logging]
# Log level: DEBUG, INFO, WARNING, ERROR
level = INFO

# Enable performance logging
log_performance = true

# Log file path (empty = console only)
log_file = enhanced_server.log

[advanced]
# Custom camera initialization commands
# These will be executed as v4l2-ctl commands before starting
camera_init_commands = [
    # "v4l2-ctl -d /dev/video0 -c exposure_auto=1",
    # "v4l2-ctl -d /dev/video0 -c exposure_absolute=200"
]

# Enable hardware-specific optimizations
raspberry_pi_optimizations = true

# Use memory mapping for better performance
use_mmap = true
